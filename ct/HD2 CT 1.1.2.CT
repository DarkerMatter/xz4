<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>113779</ID>
      <Description>"Compact Mode"</Description>
      <Color>FF0080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
By Jealousyaf
}
{$lua}
if syntaxcheck then return end

[ENABLE]

function cycleFullCompact(sender,force)
local state = not(compactmenuitem.Caption == 'Compact View Mode')
 if force~=nil then state = not force end
  compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
   getMainForm().Splitter1.Visible = state
   getMainForm().Panel4.Visible    = state
   getMainForm().Panel5.Visible    = state
end

function addCompactMenu()
 if compactmenualreadyexists then return
end

local parent = getMainForm().Menu.Items
 compactmenuitem = createMenuItem(parent)
 parent.add(compactmenuitem)
 compactmenuitem.Caption = 'Compact View Mode'
 compactmenuitem.OnClick = cycleFullCompact
 compactmenualreadyexists = 'yes'
end

addCompactMenu()
cycleFullCompact(nil,true)

[DISABLE]

cycleFullCompact(nil,false)


</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113780</ID>
      <Description>"--------------  BLUE = You will need to Activate the script by yourself !  --------------"</Description>
      <Color>FFFF00</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>113886</ID>
      <Description>"&lt;&lt;&lt; Activate All - Self"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <Color>FF00FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Unlimited Syringe"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(Syringes, game.dll,41 FF CF 3B C2 74 61)

Syringes:
nop 3

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113817</ID>
          <Description>"Unlimited Health"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aobWriteHealth,game.dll,45 89 38 49 8B 84 DE 28 04 00 00)

aobWriteHealth:
db 90 90 90


aobscanmodule(INJECT,game.dll,41 8B 84 8B 28 4C 00 00 48 8B 5C 24 20 48 8B 74 24 28)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [r11+rcx*4+4C28],#9999
  mov eax,[r11+rcx*4+00004C28]
  mov rbx,[rsp+20]
  mov rsi,[rsp+28]
  jmp return

INJECT:
  jmp far newmem
  nop 4
return:
registersymbol(INJECT)

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>61</ID>
          <Description>"*New Godmode*"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(godmode,game.dll,45 89 38 49 8B 84 DE 28 04 00 00 8B 48 10) // should be unique
alloc(_newmem,$1000)

label(_code)
label(_return)

_newmem:
  test rbx,rbx
  jz _code
  mov [r8],r15d

_code:
  //mov [r8],r15d
  mov rax,[r14+rbx*8+00000428]
  mov ecx,[rax+10]
  jmp _return

godmode:
  jmp far _newmem
_return:


aobscanmodule(setHP,game.dll,41 8B 84 8B 28 4C 00 00 48 8B 5C 24 20 48 8B 74 24 28) // should be unique
alloc(newmem_,$1000)

label(code_)
label(return_)

newmem_:
  test rdx,rdx
  jnz code_
  mov [r11+rcx*4+00004C28],#9999
  jmp code_


code_:
  mov eax,[r11+rcx*4+00004C28]
  mov rbx,[rsp+20]
  mov rsi,[rsp+28]
  jmp return_

setHP:
  jmp far newmem_
  nop 4
return_:


[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"Unlimited Stamina"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(aob_Stamina,game.dll,F3 41 0F 11 08 8B 48 10 E8 ?? ?? ?? ?? 41 8B 47 48)


aob_Stamina:
db F3 41 0F 11 30


[DISABLE]
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>113874</ID>
      <Description>"---------------------------------------------------------------"</Description>
      <Color>00FFFF</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>113887</ID>
      <Description>"&lt;&lt;&lt; Activate All - Weapons"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <Color>FF00FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>113853</ID>
          <Description>"Unlimited Mags"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(Ammunition,game.dll,41 83 2C C2 01 4D 8D 04 C2 49 8B 84 CA)
registersymbol(Ammunition)

Ammunition+4:
db 00

[DISABLE]
Ammunition+4:
db 01
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113854</ID>
          <Description>"Unlimited Grenades"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(grenades, game.dll, 41 FF 08 4A 8B 84 ED )

grenades:
nop 3

[DISABLE]
grenades:
db 41 FF 08
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113860</ID>
          <Description>"Unlimited Heatsinks Mag's"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(Ammunition_Sickle,game.dll,41 83 28 01 49 8B 84 CD 30 20 00 00)
registersymbol(Ammunition_Sickle)

Ammunition_Sickle+3:
db 00

[DISABLE]
Ammunition_Sickle+3:
db 01
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113855</ID>
          <Description>"No Recoil"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(no_Rec,game.dll,44 8B 7C 24 ?? 41 3B 46 08)

no_Rec+9:
  db EB

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113842</ID>
          <Description>"Damage Multiplier"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]

aobscanmodule(ohk,game.dll,89 87 44 64 00 00)
registersymbol(ohk)
alloc(newmem,$1000,ohk)

alloc(number,4)

label(code)
label(enemy)
label(return)
label(Pcheck)

number:
  dd 0

newmem:
  cmp  [rdi+B38],A
  jne enemy

Pcheck:
  movss [number],xmm0
  cmp [number],42fa0000
  ja enemy
  jmp code

enemy:
  mov  [rdi+00006444],0
  jmp return

code:
  mov [rdi+00006444],eax
  jmp return

ohk:
  jmp newmem
  nop
return:


[DISABLE]

ohk:
  db 89 87 44 64 00 00

unregistersymbol(ohk)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>236</ID>
          <Description>"*New damage modifier for guns and stratagems*(only use if weapon editor isnt working)"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]


aobscanmodule(damageMulti,game.dll,66 0F 6E 59 04 66 0F 6E 49 08 0F 5B C9 0F 5B DB) // should be unique
alloc(dmg_newmem,$2000)

label(dmg_code)
label(dmg_return)

dmg_newmem:
  // whitelisted weapons that get super damage
  cmp [rcx+00],#48 //#46 // AR-23 Liberator / AR-22C Patriot / AR-48 Truth Whisperer / M-105 Stalwart
  je dmg_Super
  cmp [rcx+00],#24 //#22 // P-2 Peacemaker / P-19 Redeemer
  je dmg_Super
  cmp [rcx+00],#25 //#23 // MP-98 Knight
  je dmg_Super
  cmp [rcx+00],#33 //#31 // SMG-37 Defender
  je dmg_Super
  cmp [rcx+00],#292 //#288 // LAS-5 Scythe
  je dmg_Super
  cmp [rcx+00],#291 //#287 // LAS-7 Dagger
  je dmg_Super
  cmp [rcx+00],#98 //#96 // SG-225 Breaker (11)
  je dmg_Super
  cmp [rcx+00],#41 //#39 // P-4 Senator
  je dmg_Super
  cmp [rcx+00],#62 //#60 // MG-43 / EXO-45 Gatling / Gatling Turret
  je dmg_Super
  cmp [rcx+00],#111 //#109 // ARC-03
  je dmg_Super
  cmp [rcx+00],#9 //#8 // FLAM-40 part 1
  je dmg_Super
  //cmp [rcx+00],#303 // FLAM-40 part 2 // ground fire shares ID with flame tornados
  //je dmg_Super
  cmp [rcx+00],#296 //#292 // LAS-98
  je dmg_Super
  cmp [rcx+00],#222 //#218 // LAS-99 quasar part 1
  je dmg_Super
  cmp [rcx+00],#223 // LAS-99 quasar part 2
  je dmg_Super
  cmp [rcx+00],#21 //#19 // RS-422 railgun
  je dmg_Super
  cmp [rcx+00],#10 //#9 // GL-21 part 1 / mortar shell (turret)
  je dmg_Super
  cmp [rcx+00],#215 //#212 // GL-21 part 2
  je dmg_Super
  cmp [rcx+00],#117 //#115 // MG-206 HMG
  je dmg_Super
  cmp [rcx+00],#131 //#129 // EAT-17 part 1
  je dmg_Super
  cmp [rcx+00],#184 //#182 // EAT-17 part 2
  je dmg_Super
  cmp [rcx+00],#221 //#217 // EAT-17 part 3
  je dmg_Super
  cmp [rcx+00],#143 //#141 // EXO-45 rocket part 1
  je dmg_Super
  cmp [rcx+00],#229 //#225 // EXO-45 rocket part 2
  je dmg_Super
  cmp [rcx+00],#89 // break action shotgun
  je dmg_Super
  cmp [rcx+00],#118 // anti material rifle
  je dmg_Super
  cmp [rcx+00],#123 // autocannon part 1
  je dmg_Super
  cmp [rcx+00],#211 // autocannon part 2
  je dmg_Super
  cmp [rcx+00],#132 // recoil-less rifle part 1
  je dmg_Super
  cmp [rcx+00],#220 // recoil-less rifle part 2
  je dmg_Super
  cmp [rcx+00],#145 // javelin rocket part 1
  je dmg_Super
  cmp [rcx+00],#231 // javelin rocket part 2
  je dmg_Super
  cmp [rcx+00],#125 // emancipator exo gun part 1
  je dmg_Super
  cmp [rcx+00],#212 // emancipator exo gun part 2
  je dmg_Super
  cmp [rcx+00],#126 // pelican weapon part 1
  je dmg_Super
  cmp [rcx+00],#214 // pelican weapon part 2
  je dmg_Super
  cmp [rcx+00],#70  // R-63CS Diligence Counter SNiper
  je dmg_Super
  cmp [rcx+00],#19 //#17 // LAS-16 Sickle
  je dmg_Super
  cmp [rcx+00],#80 // JAR-5 Dominator
  je dmg_Super
  cmp [rcx+00],#97 //#95 // SG-225SP Breaker Spray&amp;Pray (16)
  je dmg_Super


  // fix me
  //cmp [rcx+00],#43 // AR-23P Liberator Penetrator
  //je dmg_Super
  //cmp [rcx+00],#45 // AR-23C Liberator Concussive
  //je dmg_Super
  //cmp [rcx+00],#18 // PLAS-1 Scorcher
  //je dmg_Super
  //cmp [rcx+00],#82 // SG-8 Punisher (9)
  //je dmg_Super
  //cmp [rcx+00],#93 // SG-8S Slugger (1)
  //je dmg_Super
  //cmp [rcx+00],#18 // SG-8P Punisher Plasma (1)
  //je dmg_Super
  //cmp [rcx+00],#111 // ARC-12 Blitzer (5)
  //je dmg_Super
  //cmp [rcx+00],#97 // SG-225BB Breaker Bugbiter (7)
  //je dmg_Super
  //cmp [rcx+00],#98 // SG-225NS Breaker Nailspitter (11)
  //je dmg_Super
  //cmp [rcx+00],#99 // SG-255IE Breaker Incendiary (12)
  //je dmg_Super




  // these weapons stay default
  cmp [rcx+00],#196 //#194 // G-6 Frag part 1
  je dmg_code
  cmp [rcx+00],#107 // G-6 Frag part 2
  je dmg_code
  cmp [rcx+00],#208 //#205 // G-12 High Explosive /  G-16 Impact
  je dmg_code
  cmp [rcx+00],#198 //#195 // G-10 Incendiary
  je dmg_code
  //cmp [rcx+00],#163 // G-23 Stun
  //je dmg_code
  //cmp [rcx+00],#196 // G-123 Thermite
  //je dmg_code

  //orbital laser
  cmp [rcx+00],#299
  je dmg_code
  //303 fire ground dmg

  //500kg bomb
  cmp [rcx+00],#150
  je dmg_code
  cmp [rcx+00],#268
  je dmg_code

  //orbital precision strike
  cmp [rcx+00],#156
  je dmg_code
  cmp [rcx+00],#262
  je dmg_code

  //orbital railcannon strike
  cmp [rcx+00],#157
  je dmg_code
  cmp [rcx+00],#261
  je dmg_code

  //orbital 120MM HE barrage
  cmp [rcx+00],#155
  je dmg_code
  cmp [rcx+00],#263
  je dmg_code

  //orbital 380MM HE barrage identical ID's as precision strike
  //cmp [rcx+00],#156
  //je dmg_code
  //cmp [rcx+00],#262
  //je dmg_code

  //eagle 110mm rocket pods
  cmp [rcx+00],#148
  je dmg_code
  cmp [rcx+00],#236
  je dmg_code

  //mortar turret
  // 10 identical to GL21 bullet
  cmp [rcx+00],#218
  je dmg_code

  //eagle airstrike
  cmp [rcx+00],#138
  je dmg_code
  cmp [rcx+00],#249
  je dmg_code

  //eagle clusterbomb
  cmp [rcx+00],#224
  je dmg_code
  // 10 shell

  //helldiver pot damage
  cmp [rcx+00],#253
  je dmg_code

  //impact fall damage???
  cmp [rcx+00],#282
  je dmg_code


  jmp dmg_Enemy


dmg_Super:
  mov [rcx+0C],#10 // penetration 1
  mov [rcx+10],#10 // penetration 2
  mov [rcx+14],#10 // penetration 3
  mov [rcx+18],#10 // penetration 4
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [dmg_multiplier]
  mulss xmm1, dword ptr [admg_multiplier]
  jmp dmg_return

dmg_Enemy:
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, dword ptr [enemydmg_multiplier]
  mulss xmm1, dword ptr [enemydmg_multiplier]
  jmp dmg_return

dmg_code:
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  jmp dmg_return


dmg_multiplier:
  dd (float)1

admg_multiplier:
  dd (float)1

enemydmg_multiplier:
  dd (float)0.2


damageMulti:
  jmp far dmg_newmem
  nop 2
dmg_return:



[DISABLE]

damageMulti:
db 66 0F 6E 59 04 66 0F 6E 49 08 0F 5B C9 0F 5B DB

dealloc(dmg_newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113828</ID>
          <Description>"*New no reload (Guns and Weapons drops)*"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(newReload,game.dll,41 89 28 49 8B 84 CA 28 20 00 00 8B 48 10) // should be unique
alloc(newRA_newmem,$1000)

label(newRA_code)
label(newRA_return)

newRA_newmem:
  cmp ebp,#1
  jge newRA_code
  mov ebp,#1
  jmp newRA_code


newRA_code:
  mov [r8],ebp
  mov rax,[r10+rcx*8+00002028]
  mov ecx,[rax+10]
  jmp newRA_return

newReload:
  jmp far newRA_newmem
newRA_return:


aobscanmodule(newReload2,game.dll,48 63 85 C8 4B 00 00 FF 4C 87 04 83 FE FF) // should be unique
alloc(newRB_newmem,$1000)

label(newRB_code)
label(newRB_return)

newRB_newmem:
  movsxd rax,dword ptr [rbp+00004BC8]
  cmp [rdi+rax*4+04],#2
  jge newRB_code
  mov [rdi+rax*4+04],#1
  cmp esi,-01
  jmp newRB_return

newRB_code:

  dec [rdi+rax*4+04]
  cmp esi,-01
  jmp newRB_return

newReload2:
  jmp far newRB_newmem
newRB_return:






[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113858</ID>
          <Description>"No Overheat "</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_NoLaserOverheat,game.dll,F3 0F 11 09 4C 8B C1 49)

aob_NoLaserOverheat:
  nop 4

aobscanmodule(Sickle_Rifle_Overheating, game.dll,F3 42 0F 11 84 32 ?? ?? ?? ?? 8B 55 38 43 89 94 35)
registersymbol(Sickle_Rifle_Overheating)

Sickle_Rifle_Overheating:
nop 10

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113859</ID>
          <Description>"No Sway"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_NoSway,game.dll,F3 0F 51 C2 EB 08 0F 28 C2 E8 ? ? ? ? 80 7C 24)
registersymbol(aob_NoSway)

aob_NoSway:
nop 4

[DISABLE]
aob_NoSway:
  db F3 0F 51 C2

unregistersymbol(aob_NoSway)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113861</ID>
          <Description>"No Reload | Autocannon | P-4 (revolver) | SG-8S and SG-8 (shotguns)"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]

aobscanmodule(PUMP,game.dll,FF 4C 87 04 83 FE FF 74 52 49 8B 00 F6 40 14 01)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
nop
cmp esi,-01
je game.dll+39064F
mov rax,[r8]
test byte ptr [rax+14],01
jmp return

PUMP:
jmp far newmem
nop 2
return:
registersymbol(PUMP)

[DISABLE]

PUMP:
db FF 4C 87 04 83 FE FF 74 52 49 8B 00 F6 40 14 01

unregistersymbol(PUMP)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113856</ID>
          <Description>"Fast Charge (Railguns)"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(aob_RailgunCharge,game.dll,F3 43 0F 11 84 37 2C 2C 00 00)
registersymbol(aob_RailgunCharge)
assert(aob_RailgunCharge+74, F3 41 0F 10)
alloc(newmem,1024)
label(return)

newmem:
  mov [r14+r15+00002C2C], (float)2.999999
  movss xmm0, [r14+r15+00002C2C]
  test cl, cl
  jz far return+66
  jmp far return

aob_RailgunCharge:
  jmp far newmem
return:

[DISABLE]
aob_RailgunCharge:
  db F3 43 0F 11 84 37 2C 2C 00 00 84 C9 74 66

unregistersymbol(aob_RailgunCharge)
dealloc(newmem_example)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113889</ID>
          <Description>"QuasarInstantCharge"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(QuasarInstantCharge,game.dll,F3 43 0F 10 8C 2E ? ? ? ? F3 41 0F 10 57) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [r14+r13+00003834], (float)99.9999
  movss xmm1,[r14+r13+00003834]
  movss xmm2,[r15+38]
  jmp return

QuasarInstantCharge:
  jmp far newmem
  nop 2
return:
registersymbol(QuasarInstantCharge)


[DISABLE]

QuasarInstantCharge:
  db F3 43 0F 10 8C 2E 34 38 00 00 F3 41 0F 10 57 38

unregistersymbol(QuasarInstantCharge)
dealloc(newmem)

{
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>113875</ID>
      <Description>"---------------------------------------------------------------"</Description>
      <Color>00FFFF</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>113888</ID>
      <Description>"&lt;&lt;&lt; Activate All - Other"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <Color>FF00FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>113865</ID>
          <Description>"Infinite Backpack"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_Autocannon,game.dll,2B C6 4D 8D 84 24)
registersymbol(aob_Autocannon)

aob_Autocannon:
nop 2

[DISABLE]
aob_Autocannon:
  db 2B C6

unregistersymbol(aob_Autocannon)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113896</ID>
          <Description>"instant complete missions"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]

aobscanmodule(missionA,game.dll,45 8B 8A D8 87 00 00 48 8D 8F 1C 01 00 00) // should be unique
alloc(missionA_newmem,$1000)

label(missionA_code)
label(missionA_return)

missionA_newmem:
  mov [r10+000087D8],#1

missionA_code:
  mov r9d,[r10+000087D8]
  lea rcx,[rdi+0000011C]
  jmp missionA_return

missionA:
  jmp far missionA_newmem
missionA_return:


aobscanmodule(missionB,game.dll,41 8B 87 F8 87 00 00 83 E8 02 83 F8 01 8B 83 54 0A 00 00) // should be unique
alloc(missionB_newmem,$1000)

label(missionB_code)
label(missionB_return)

missionB_newmem:
  mov [r15+000087F8],#2

missionB_code:
  mov eax,[r15+000087F8]
  sub eax,02
  cmp eax,01
  mov eax,[rbx+00000A54]
  jmp missionB_return

missionB:
  jmp far missionB_newmem
  nop 5
missionB_return:


aobscanmodule(completeBaseHive,game.dll,F3 41 0F 5C 8E 30 01 00 00 F3 41 0F 59 A6 44 01 00 00) // should be unique
alloc(BaseHive_newmem,$1000)

label(BaseHive_code)
label(BaseHive_return)

BaseHive_newmem:
  mov byte ptr [r15+rdx*4+21],#1

BaseHive_code:
  subss xmm1,[r14+00000130]
  mulss xmm4,[r14+00000144]
  jmp BaseHive_return

completeBaseHive:
  jmp far BaseHive_newmem
  nop 4
BaseHive_return:



[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113871</ID>
          <Description>"Instant Extraction"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_ShuttleLandingTimerSet,game.dll,61 F3 41 0F 11 00)
registersymbol(aob_ShuttleLandingTimerSet)
alloc(newmem_ShuttleLandingTimerSet,1024)
label(return_ShuttleLandingTimerSet)
alloc(compare_float_check, 4)

newmem_ShuttleLandingTimerSet:
  ucomiss xmm0, DWORD [compare_float_check]
  jbe short @f
    movss xmm0, DWORD [compare_float_check]
  @@:
  movss [r8],xmm0
  mov rax,[rsi+r14*8+00000450]
  mov ecx,[rax+10]
  jmp return_ShuttleLandingTimerSet

aob_ShuttleLandingTimerSet+01:
  jmp far newmem_ShuttleLandingTimerSet
  nop 2
return_ShuttleLandingTimerSet:

compare_float_check:
dd (float)1.0

[DISABLE]
aob_ShuttleLandingTimerSet+01:
  db F3 41 0F 11 00 4A 8B 84 F6 50 04 00 00 8B 48 10

unregistersymbol(aob_ShuttleLandingTimerSet)
dealloc(newmem_ShuttleLandingTimerSet)
dealloc(compare_float_check)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113893</ID>
          <Description>"instant civilian mission (save 1 of them for finish)"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(rescue,game.dll,BA AD 43 54 1C F3 0F 11 8F 10 88 00 00 8B 48 10 E8 ** ** ** ** FF C5 41 3B AF 40 D6 39 00 ** ** ** ** ** ** 4C 8B 74 24 30 48 8B 7C 24 70) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  cmp [rdi+00008810],(float)80
  jge code
  mov edx,1C5443AD
  mov [rdi+00008810],(float)80
  mov ecx,[rax+10]
  jmp return

code:
  mov edx,1C5443AD
  movss [rdi+00008810],xmm1
  mov ecx,[rax+10]
  jmp return

rescue:
  jmp far newmem
  nop 2
return:

[DISABLE]

// made by zoDDel
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113866</ID>
          <Description>"Shield No Cooldown"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(BP_shield,game.dll,F3 41 0F 5C CA F3 0F 11 8C EE)

BP_shield:
db F3 0F 5C C9 90


[DISABLE]


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113868</ID>
          <Description>"Stratagems Unlimited"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(strat,game.dll,0F 86 BF 01 00 00 0F)

strat:
  db 90 E9

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113867</ID>
          <Description>"No Cooldown Jetpack"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(jetpack,game.dll,8B 08 89 8C BE ?? ?? 00 00)
registersymbol(jetpack)

jetpack+2:
  db 90 90 90 90 90 90 90


[DISABLE]

jetpack+2:
  db 89 8C BE A8 2D 00 00

unregistersymbol(jetpack)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113869</ID>
          <Description>"Unlimited Ammo (Mechs)"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(NoReload,game.dll,41 89 28 49 8B 84 CA 28 20 00 00 8B 48 10)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  nop
  mov rax,[r10+rcx*8+00002028]
  mov ecx,[rax+10]
  jmp return

NoReload:
  jmp far newmem
return:
registersymbol(NoReload)

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113870</ID>
          <Description>"Max Mission time (Unlimited)"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(aob_InfiniteMissionTimer,game.dll,F3 0F 5C C7 F3 41 0F 5F C5)
registersymbol(aob_InfiniteMissionTimer)

aob_InfiniteMissionTimer:
  nop 4

[DISABLE]
aob_InfiniteMissionTimer:
  db F3 0F 5C C7

unregistersymbol(aob_InfiniteMissionTimer)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113873</ID>
          <Description>"Mini-Map Show All"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_CheckIsBlipSeen,game.dll,41 0F B6 44 97 23)
aobscanmodule(aob_CheckIfAlienHivesAreObstructed,game.dll,41 80 BE 3C BA 07 00 00)
aobscanmodule(aob_CheckIfMinorInterestBlipIsDiscovered,game.dll,0F 85 ?? ?? ?? ?? 48 8B 44 24 ?? 80 78 29 00)
aobscanmodule(aob_GetMinorInterestBlipIcon,game.dll,0F 84 ?? ?? ?? ?? 48 8B 4C 24 ?? F3 41 0F 10 4F)
aobscanmodule(aob_CheckMissionBlip,game.dll,0F 85 59 02 00 00 49 8D)


aob_CheckIsBlipSeen:
  db B8 01 00 00 00 90

aob_CheckIfAlienHivesAreObstructed:
  db F8 90 90 90 90 90 90 90

aob_CheckIfMinorInterestBlipIsDiscovered:
  db 90 E9

aob_GetMinorInterestBlipIcon:
  db EB 04

aob_CheckMissionBlip:
  db 90 E9

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113872</ID>
          <Description>"Vault Open"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(aob_VaultCheck,game.dll,0F 84 BD 00 00 00 81 FA E0)
registersymbol(aob_VaultCheck)

aob_VaultCheck:
  db 90 E9

[DISABLE]
aob_VaultCheck:
  db 0F 84

unregistersymbol(aob_VaultCheck)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>113897</ID>
          <Description>"enemys dont attack"</Description>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]

aobscanmodule(INJECTNOAGGRO,game.dll,72 0C FF C0 41 3B C0 72 E9 32 C0 41 5E C3) // should be unique
alloc(newmem,$1000)

INJECTNOAGGRO:
  nop 2

registersymbol(INJECTNOAGGRO)

[DISABLE]

INJECTNOAGGRO:
  db 72 0C FF C0 41 3B C0 72 E9 32 C0 41 5E C3

unregistersymbol(INJECTNOAGGRO)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>113885</ID>
      <Description>"---------SAMPLES AND MORE------------"</Description>
      <Color>00FFFF</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>113884</ID>
      <Description>"Unlock ALL"</Description>
      <Color>FFFF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">[ENABLE]

aobscanmodule(aobUnlock1,game.dll,48 89 5C 24 08 48 8B D9 85) // should be unique
registersymbol(aobUnlock1)

aobscanmodule(aobUnlock2,game.dll,83 B9 ?? ?? ?? ?? ?? 75 ?? 85 D2 74 ?? 44 8B 89 ?? ?? ?? ?? 45 33 C0 45 85 C9 74 ?? 48 8D 81 ?? ?? ?? ?? 39 50 ?? 74 ?? 41 FF C0 48 83 C0 ?? 45 3B C1 72 ?? 32 C0 C3 8B 00 48 69 C8) // should be unique
registersymbol(aobUnlock2)

aobscanmodule(aobUnlock3,game.dll,48 83 EC ?? 44 8B 49 ?? 45 33 C0) // should be unique
registersymbol(aobUnlock3)

aobUnlock1:
  db b0 01 c3

aobUnlock2:
  db b0 01 c3

aobUnlock3:
  db b0 01 c3



[DISABLE]


</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113894</ID>
      <Description>"run 1.25x"</Description>
      <Color>FFFF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_RunSpeed,game.dll,F3 41 0F 59 56 0C F3)
registersymbol(aob_RunSpeed)
alloc(newmem_RunSpeed,1024)
label(return_RunSpeed)

newmem_RunSpeed:
  push rbx
  mov rbx,F2F926ABF2F926AB
  cmp [rax],rbx
  jne short @f
   mov [r14+0C],(float)1.25
  @@:
  pop rbx
  mulss xmm2,[r14+0C]
  mulss xmm2,[r14+10]
  movaps xmm4,xmm2
  jmp return_RunSpeed

aob_RunSpeed:
  jmp far newmem_RunSpeed
  nop
return_RunSpeed:

[DISABLE]
aob_RunSpeed:
  db F3 41 0F 59 56 0C F3 41 0F 59 56 10 0F 28 E2

unregistersymbol(aob_RunSpeed)
dealloc(newmem_RunSpeed)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113895</ID>
      <Description>"run 3x"</Description>
      <Color>FFFF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_RunSpeed,game.dll,F3 41 0F 59 56 0C F3)
registersymbol(aob_RunSpeed)
alloc(newmem_RunSpeed,1024)
label(return_RunSpeed)

newmem_RunSpeed:
  push rbx
  mov rbx,F2F926ABF2F926AB
  cmp [rax],rbx
  jne short @f
   mov [r14+0C],(float)3
  @@:
  pop rbx
  mulss xmm2,[r14+0C]
  mulss xmm2,[r14+10]
  movaps xmm4,xmm2
  jmp return_RunSpeed

aob_RunSpeed:
  jmp far newmem_RunSpeed
  nop
return_RunSpeed:

[DISABLE]
aob_RunSpeed:
  db F3 41 0F 59 56 0C F3 41 0F 59 56 10 0F 28 E2

unregistersymbol(aob_RunSpeed)
dealloc(newmem_RunSpeed)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113882</ID>
      <Description>"Samples - 49 || 39 || 5"</Description>
      <Color>FFFF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(samples,game.dll,4C 8B 15 ? ? ? ? 45 8B F0 0F 84 ? ? ? ? 45 8B 8A)
alloc(newmem,$1000)

label(return)
label(resource_ptr)

(DWORD)[samples+03]+samples+07:
resource_ptr:

newmem:
push rax
mov rax,[resource_ptr]
mov [rax+17EC],#49 // Common samples
mov [rax+17F0],#39 // Rare samples
mov [rax+17F4],#5 // Super samples
mov r10,rax
pop rax
jmp return

samples:
jmp newmem
nop 2
return:
registersymbol(samples)

[DISABLE]

samples:
mov r10,[resource_ptr]

unregistersymbol(samples)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Speed hack | in map"</Description>
      <Options moHideChildren="1"/>
      <DropDownList>01: 1
02: 2
03: 3
04: 4
05: 5
06: 6
07: 7
08: 8
09: 9
10: 10
11: 11
12: 12
13: 13
14: 14
15: 15
16: 16
17: 17
18: 18
19: 19
20:20
</DropDownList>
      <Color>FFFF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]


aobscanmodule(aobMovement,game.dll,F3 41 0F 59 56 0C F3 41 0F 59 56 10 0F 28 E2) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  push rbx
   mov rbx,F2F926ABF2F926AB // local hash for the missions
   cmp qword ptr[rax],rbx
   jne short @f
    mov rbx,fSpeed
    mulss xmm2,[rbx]
   @@:
  pop rbx
  mulss xmm2,[r14+0C]
  mulss xmm2,[r14+10]
  movaps xmm4,xmm2
  jmp return

aobMovement:
  jmp far newmem
  nop
return:
registersymbol(aobMovement)

[DISABLE]

aobMovement:
  db F3 41 0F 59 56 0C F3 41 0F 59 56 10 0F 28 E2

unregistersymbol(aobMovement)
dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>19</ID>
          <Description>"Speed:"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">01: 1
02: 2
03: 3
04: 4
05: 5
06: 6
07: 7
08: 8
09: 9
10: 10
</DropDownList>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>fSpeed</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>35</ID>
      <Description>"Weapon Edit | in armory"</Description>
      <Options moHideChildren="1"/>
      <Color>FFFF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2024-03-21
  Author : cfe

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aobReadWeapon3,game.dll,66 0F 6E 40 04 4D 8B C6 41 8B 57 0C 0F 5B C0) // should be unique
alloc(newmem4,$1000)

label(code4)
label(return4)

newmem4:

code4:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  movd xmm0,[rax+04]
  mov r8,r14
  mov edx,[r15+0C]
  cvtdq2ps xmm0,xmm0
  jmp return4

aobReadWeapon3:
  jmp far newmem4
  nop
return4:
registersymbol(aobReadWeapon3)

aobscanmodule(aobBlitzerFire,game.dll,0F 10 48 10 48 8D 8D B0 00 00 00 0F 29 85 B0 00 00 00) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  push rbx
  push rcx
  mov rbx,pFirerate
  lea rcx,[rax-4]
  mov [rbx],rcx
  pop rcx
  pop rbx
  movups xmm1,[rax+10]
  lea rcx,[rbp+000000B0]
  movaps [rbp+000000B0],xmm0
  jmp return5

aobBlitzerFire:
  jmp far newmem5
  nop 4
return5:
registersymbol(aobBlitzerFire)

aobscanmodule(aobBlitzerDamage,game.dll,44 8B 7A 24 49 8B D6 66 0F 6E 70 04 0F 5B F6) // should be unique
alloc(newmem6,$1000)

label(code6)
label(return6)

newmem6:

code6:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  mov r15d,[rdx+24]
  mov rdx,r14
  movd xmm6,[rax+04]
  cvtdq2ps xmm6,xmm6
  jmp return6

aobBlitzerDamage:
  jmp far newmem6
  nop
return6:
registersymbol(aobBlitzerDamage)


aobscanmodule(aobFireRate,game.dll,48 8D 80 80 00 00 00 0F 11 41 80 0F 10 40 A0 0F 11 49 90 0F 10 48 B0 0F 11 41 A0 0F 10 40 C0 0F 11 49 B0 0F 10 48 D0 0F 11 41 C0 0F 10 40 E0 0F 11 49 D0 0F 10 48 F0 0F 11 41 E0 0F 11 49 F0 49 2B D5 75 AE 0F 10 00 0F 10 48 10 0F 11 01 0F 10 40 20 0F 11 49 10 0F 10 48 30 0F 11 41 20 0F 10 40 40 0F 11 49 30 0F 10 48 50) // should be unique
alloc(newmem7,$1000)

label(code7)
label(return7)

newmem7:

code7:
  push rbx
  mov ebx,[rax+8]
  test ebx,ebx
  je short @f
   mov rbx,pFirerate
   mov [rbx],rax
  @@:
  pop rbx
  lea rax,[rax+00000080]
  movups [rcx-80],xmm0
  movups xmm0,[rax-60]
  jmp return7

aobFireRate:
  jmp far newmem7
  nop
return7:
registersymbol(aobFireRate)


aobscanmodule(aobReadDMG,game.dll,F3 44 0F 10 8D F8 01 00 00 4D 8B C6 66 0F 6E 40 04) // should be unique
alloc(newmem8,$1000)

label(code8)
label(return8)

newmem8:

code8:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  movss xmm9,[rbp+000001F8]
  mov r8,r14
  movd xmm0,[rax+04]
  jmp return8

aobReadDMG:
  jmp far newmem8
  nop 3
return8:
registersymbol(aobReadDMG)

aobscanmodule(aobDamageSpecial,game.dll,F3 44 0F 10 B5 F8 01 00 00 4D 8B C6 66 0F 6E 40 04) // should be unique
alloc(newmem9,$1000)

label(code9)
label(return9)

newmem9:

code9:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  movss xmm14,[rbp+000001F8]
  mov r8,r14
  movd xmm0,[rax+04]
  jmp return9

aobDamageSpecial:
  jmp far newmem9
  nop 3
return9:
registersymbol(aobDamageSpecial)

[DISABLE]



aobReadWeapon3:
  db 66 0F 6E 40 04 4D 8B C6 41 8B 57 0C 0F 5B C0

unregistersymbol(aobReadWeapon3)
dealloc(newmem4)


aobBlitzerFire:
  db 0F 10 48 10 48 8D 8D B0 00 00 00 0F 29 85 B0 00 00 00

unregistersymbol(aobBlitzerFire)
dealloc(newmem5)

aobBlitzerDamage:
  db 44 8B 7A 24 49 8B D6 66 0F 6E 70 04 0F 5B F6

unregistersymbol(aobBlitzerDamage)
dealloc(newmem6)



{
// ORIGINAL CODE - INJECTION POINT: game.dll+CFDA33

game.dll+CFDA0A: 8B 85 F0 00 00 00        - mov eax,[rbp+000000F0]
game.dll+CFDA10: 48 89 54 24 60           - mov [rsp+60],rdx
game.dll+CFDA15: 85 C0                    - test eax,eax
game.dll+CFDA17: 74 08                    - je game.dll+CFDA21
game.dll+CFDA19: 4D 8B AC C0 70 FD C9 01  - mov r13,[r8+rax*8+01C9FD70]
game.dll+CFDA21: 8B 4A 3C                 - mov ecx,[rdx+3C]
game.dll+CFDA24: 49 8B C6                 - mov rax,r14
game.dll+CFDA27: 85 C9                    - test ecx,ecx
game.dll+CFDA29: 74 08                    - je game.dll+CFDA33
game.dll+CFDA2B: 49 8B 84 C8 80 F0 C9 01  - mov rax,[r8+rcx*8+01C9F080]
// ---------- INJECTING HERE ----------
game.dll+CFDA33: 41 8B 7D 3C              - mov edi,[r13+3C]
// ---------- DONE INJECTING  ----------
game.dll+CFDA37: 49 8B D6                 - mov rdx,r14
game.dll+CFDA3A: 66 0F 6E 70 04           - movd xmm6,[rax+04]
game.dll+CFDA3F: 0F 5B F6                 - cvtdq2ps xmm6,xmm6
game.dll+CFDA42: 85 FF                    - test edi,edi
game.dll+CFDA44: 74 08                    - je game.dll+CFDA4E
game.dll+CFDA46: 49 8B 94 F8 80 F0 C9 01  - mov rdx,[r8+rdi*8+01C9F080]
game.dll+CFDA4E: 49 8B C6                 - mov rax,r14
game.dll+CFDA51: 85 C9                    - test ecx,ecx
game.dll+CFDA53: 74 08                    - je game.dll+CFDA5D
game.dll+CFDA55: 49 8B 84 C8 80 F0 C9 01  - mov rax,[r8+rcx*8+01C9F080]
}
aobFireRate:
  db 48 8D 80 80 00 00 00 0F 11 41 80 0F 10 40 A0

unregistersymbol(aobFireRate)
dealloc(newmem7)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+D04C9E

game.dll+D04C6B: 45 0F 57 C0                       - xorps xmm8,xmm8
game.dll+D04C6F: 4D 85 DB                          - test r11,r11
game.dll+D04C72: 0F 84 35 2B 00 00                 - je game.dll+D077AD
game.dll+D04C78: 49 8B C3                          - mov rax,r11
game.dll+D04C7B: 48 8D 8D F0 01 00 00              - lea rcx,[rbp+000001F0]
game.dll+D04C82: 41 8B D4                          - mov edx,r12d
game.dll+D04C85: 66 66 66 0F 1F 84 00 00 00 00 00  - nop word ptr [rax+rax+00000000]
game.dll+D04C90: 48 8D 89 80 00 00 00              - lea rcx,[rcx+00000080]
game.dll+D04C97: 0F 10 00                          - movups xmm0,[rax]
game.dll+D04C9A: 0F 10 48 10                       - movups xmm1,[rax+10]
// ---------- INJECTING HERE ----------
game.dll+D04C9E: 48 8D 80 80 00 00 00              - lea rax,[rax+00000080]
// ---------- DONE INJECTING  ----------
game.dll+D04CA5: 0F 11 41 80                       - movups [rcx-80],xmm0
game.dll+D04CA9: 0F 10 40 A0                       - movups xmm0,[rax-60]
game.dll+D04CAD: 0F 11 49 90                       - movups [rcx-70],xmm1
game.dll+D04CB1: 0F 10 48 B0                       - movups xmm1,[rax-50]
game.dll+D04CB5: 0F 11 41 A0                       - movups [rcx-60],xmm0
game.dll+D04CB9: 0F 10 40 C0                       - movups xmm0,[rax-40]
game.dll+D04CBD: 0F 11 49 B0                       - movups [rcx-50],xmm1
game.dll+D04CC1: 0F 10 48 D0                       - movups xmm1,[rax-30]
game.dll+D04CC5: 0F 11 41 C0                       - movups [rcx-40],xmm0
game.dll+D04CC9: 0F 10 40 E0                       - movups xmm0,[rax-20]
}
aobReadDMG:
  db F3 44 0F 10 8D F8 01 00 00 4D 8B C6 66 0F 6E 40 04

unregistersymbol(aobReadDMG)
dealloc(newmem8)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+D06A0C

game.dll+D069E3: 8B 85 90 05 00 00           - mov eax,[rbp+00000590]
game.dll+D069E9: 85 C0                       - test eax,eax
game.dll+D069EB: 74 08                       - je game.dll+D069F5
game.dll+D069ED: 4D 8B BC C1 80 7D CA 01     - mov r15,[r9+rax*8+01CA7D80]
game.dll+D069F5: 8B 4F 3C                    - mov ecx,[rdi+3C]
game.dll+D069F8: 49 8B C6                    - mov rax,r14
game.dll+D069FB: 44 89 64 24 20              - mov [rsp+20],r12d
game.dll+D06A00: 85 C9                       - test ecx,ecx
game.dll+D06A02: 74 08                       - je game.dll+D06A0C
game.dll+D06A04: 49 8B 84 C9 90 70 CA 01     - mov rax,[r9+rcx*8+01CA7090]
// ---------- INJECTING HERE ----------
game.dll+D06A0C: F3 44 0F 10 8D F8 01 00 00  - movss xmm9,[rbp+000001F8]
// ---------- DONE INJECTING  ----------
game.dll+D06A15: 4D 8B C6                    - mov r8,r14
game.dll+D06A18: 66 0F 6E 40 04              - movd xmm0,[rax+04]
game.dll+D06A1D: 41 0F 28 C9                 - movaps xmm1,xmm9
game.dll+D06A21: 41 8B 57 3C                 - mov edx,[r15+3C]
game.dll+D06A25: F3 44 0F 11 4C 24 50        - movss [rsp+50],xmm9
game.dll+D06A2C: F3 41 0F 5E CA              - divss xmm1,xmm10
game.dll+D06A31: 0F 5B C0                    - cvtdq2ps xmm0,xmm0
game.dll+D06A34: F3 0F 59 C1                 - mulss xmm0,xmm1
game.dll+D06A38: F3 0F 11 44 24 24           - movss [rsp+24],xmm0
game.dll+D06A3E: 85 D2                       - test edx,edx
}
aobDamageSpecial:
  db F3 44 0F 10 B5 F8 01 00 00 4D 8B C6 66 0F 6E 40 04

unregistersymbol(aobDamageSpecial)
dealloc(newmem9)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+D04F27

game.dll+D04EFD: 8B 85 F0 00 00 00           - mov eax,[rbp+000000F0]
game.dll+D04F03: 85 C0                       - test eax,eax
game.dll+D04F05: 74 08                       - je game.dll+D04F0F
game.dll+D04F07: 49 8B BC C1 80 7D CA 01     - mov rdi,[r9+rax*8+01CA7D80]
game.dll+D04F0F: 41 8B 4D 3C                 - mov ecx,[r13+3C]
game.dll+D04F13: 49 8B C6                    - mov rax,r14
game.dll+D04F16: 44 89 64 24 20              - mov [rsp+20],r12d
game.dll+D04F1B: 85 C9                       - test ecx,ecx
game.dll+D04F1D: 74 08                       - je game.dll+D04F27
game.dll+D04F1F: 49 8B 84 C9 90 70 CA 01     - mov rax,[r9+rcx*8+01CA7090]
// ---------- INJECTING HERE ----------
game.dll+D04F27: F3 44 0F 10 B5 F8 01 00 00  - movss xmm14,[rbp+000001F8]
// ---------- DONE INJECTING  ----------
game.dll+D04F30: 4D 8B C6                    - mov r8,r14
game.dll+D04F33: 66 0F 6E 40 04              - movd xmm0,[rax+04]
game.dll+D04F38: 41 0F 28 CE                 - movaps xmm1,xmm14
game.dll+D04F3C: 8B 57 3C                    - mov edx,[rdi+3C]
game.dll+D04F3F: F3 44 0F 11 74 24 4C        - movss [rsp+4C],xmm14
game.dll+D04F46: F3 41 0F 5E CA              - divss xmm1,xmm10
game.dll+D04F4B: 0F 5B C0                    - cvtdq2ps xmm0,xmm0
game.dll+D04F4E: F3 0F 59 C1                 - mulss xmm0,xmm1
game.dll+D04F52: F3 0F 11 44 24 24           - movss [rsp+24],xmm0
game.dll+D04F58: 85 D2                       - test edx,edx
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>36</ID>
          <Description>"Firerate:"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>pFirerate</Address>
          <Offsets>
            <Offset>8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"Damage:"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pWeapon</Address>
          <Offsets>
            <Offset>4</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"Structure Penetration"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pWeapon</Address>
          <Offsets>
            <Offset>8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"Penetration 1"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pWeapon</Address>
          <Offsets>
            <Offset>C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>40</ID>
          <Description>"Penetration 2"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pWeapon</Address>
          <Offsets>
            <Offset>10</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of mov [r13+0000A21C],edi</Description>
      <AddressString>game.dll+D657FC</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>4C</Byte>
        <Byte>A2</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>89</Byte>
        <Byte>BD</Byte>
        <Byte>1C</Byte>
        <Byte>A2</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>45</Byte>
        <Byte>85</Byte>
        <Byte>F6</Byte>
        <Byte>49</Byte>
        <Byte>8D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [r8],xmm1</Description>
      <AddressString>game.dll+5E50C8</AddressString>
      <Before>
        <Byte>C0</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>5F</Byte>
        <Byte>C8</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>48</Byte>
        <Byte>10</Byte>
        <Byte>E8</Byte>
        <Byte>6B</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>fSpeed</Name>
      <Address>1D9140000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pWeapon</Name>
      <Address>1D9140010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pFirerate</Name>
      <Address>1D9140020</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>if not syntaxcheck then

  getAutoAttachList().add("helldivers2.exe")

end



</LuaScript>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"game.dll"+C89D6E</Address>
      <Comment>damage
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
